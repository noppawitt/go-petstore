// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
	// Creates a new pet
	// (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request, id string)
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPets(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindPetByID operation middleware
func (siw *ServerInterfaceWrapper) FindPetByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets", wrapper.FindPets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pets", wrapper.AddPet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pets/{id}", wrapper.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets/{id}", wrapper.FindPetByID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
