// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
	// Creates a new pet
	// (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request, id string)
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(w http.ResponseWriter, r *http.Request, id string)
	// Ping
	// (GET /ping)
	Ping(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPets(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindPetByID operation middleware
func (siw *ServerInterfaceWrapper) FindPetByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Ping(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets", wrapper.FindPets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pets", wrapper.AddPet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pets/{id}", wrapper.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets/{id}", wrapper.FindPetByID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping", wrapper.Ping)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"l5W85DmOvuL3wu/thHP3zwAAAP//2iU1nu0SAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
