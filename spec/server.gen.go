// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all pets
	// (GET /pets)
	FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)
	// Creates a new pet
	// (POST /pets)
	AddPet(w http.ResponseWriter, r *http.Request)
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(w http.ResponseWriter, r *http.Request, id string)
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FindPets operation middleware
func (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams

	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPets(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindPetByID operation middleware
func (siw *ServerInterfaceWrapper) FindPetByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets", wrapper.FindPets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pets", wrapper.AddPet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pets/{id}", wrapper.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pets/{id}", wrapper.FindPetByID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXTW8juRH9KwUmx07LmclJp3jHs4CA7IwT7+ay40OZXZJqwY82WZRHMPTfgyJbX5bH",
	"m0USIEEu+uhmdb169Vh8/Wxs9GMMFCSb+bPJdk0e68+PKcWkP8YUR0rCVC/bOJB+D5Rt4lE4BjNvi6He",
	"68wyJo9i5oaDvH9nOiPbkdpfWlEyu854yhlX33zQ/vYhNEvisDK7XWcSPRZONJj5z2ZKuF9+v+vMJ3q6",
	"JbnEHdC/ku4TeoK4BFkTjCSXCTsjuLqM+3E7vh33AmjNrvAmbOjc56WZ//xsfp9oaebmd7NjI2ZTF2ZT",
	"LbvuZTE8XEL6KfBjIeDht+Diwdzv7nd6mcMytgYHQVtRkkd2Zm5wZCH0f85PuFpR6jmabiLU3LVrcH27",
	"gB8JvelMSRq0Fhnns9lJzK57AfkaMvrRUQ2WNQqUTBlQoWeJiQAzYAD62pZJhIF8DFkSCsGSUEqiDBxq",
	"wZ9HCvqk9/0V5JEsL9liTdUZx5ZCpqMSzPWIdk3wrr86g5zns9nT01OP9XYf02o2xebZXxYfPn66+/iH",
	"d/1Vvxbvqjwo+fx5eUdpw5Zeq3tWl8y0FyzulLPbqUzTmQ2l3Ej5Y3/VX+mT40gBRzZz875e6syIsq79",
	"nylB+mPV5HRO699ISgoZ0LnKJCxT9JWhvM1CvlGt/0umBGsl2VrKGSR+CZ/QQ6YBbAwDewpSPFCWHn5A",
	"shQwg5AfY4KMKxbhDBlHptBBIAtpHYMtGTL5kwUsgJ6kh2sKhAFQYJVwwwMCllWhDtACoy2Oa2gPH0rC",
	"B5aSIA4cwcVEvoOYAiYCWpEAOZrQBbId2JJyySp/R1ZK7uGmcAbPICWNnDsYi9twwKS5KEUtugPhYHko",
	"QWCDiUuGX0qW2MMiwBotrBUE5kwwOhRCGNhK8UrHok0zrQUHHjlbDivAIFrNsXbHq+LwUPm4xkSScE+i",
	"rgcfHWVhAvYjpYGVqb/zBn0rCB0/FvQwMCozCTM8am0bciwQYgCJSWJSSnhJYThk7+E2IWUKojApsD8C",
	"KCkgbKIrMqLAhgIFVMCNXP3wWJI+YxGOT15SmlhfomXH+SxJzaAf3bG/FnIc0JE2duiUR0sJRQvT7x7u",
	"Sh4pDKwsO1TxDNHF1KkCM1lRNdcqq1S06g42tGZbHIKeKWkoHhw/UIo9/BDTAwMVzj4Op23Q21XYDi0H",
	"xv5L+BLuaKidKBmWpOJz8SGmGkDxqJhUJBXfg+4Nj/WBE/mcXQdUznZLazm4ojpUdfZwu8ZMzrWNMVKa",
	"wivNtb0ksMRi+aE0wnGfR9edxm/ITa3jDaWE3Xlq3SfAQ3fYiIEf1j38JDCScxSEsp4SY8yFdCftN1EP",
	"SgXud4Fuuj2X+yfty6pMdhXIQRahBAuSOEs9hDYsSD18X7IlIKnTYCh82AU6KbIlR4krnKbffYBXtRSs",
	"4rHFZwzgcaUlk5u61cNfSwv10WnfWveoNO0coXSH4QNYrG6StnKSZyt7Esc0ZA67UcWiDQYO3RHKtHED",
	"Z94DzorBspSBFWrOCEX2Opsa2TKdkVbz9XB72pjK3IRxTCRc/MnkaqIp3Ym+dfT2X/SIU4NQj7vFYObm",
	"ew6Dni/12EhKAKVcHcf5YSG40rkPS3ZCCR62Rq2AmZvHQml7POd1nekmg1g9iJCvZ9ClY2oXMCXc6v8s",
	"23rsqS+sZuYcgcev7HWMF/9ASd1LolycVFipnmXfwOTYs5yB+lXrubtXA5RHHS0V/burq73rodC82Ti6",
	"yTjMfskK8fm1st8ybs21vSBid+F/RhLYg2nuaInFyW/C8xaMZuFfSVwCfR11tOoMbms6k4v3mLavGAjF",
	"Nsb8itX4kAilWrZAT7p278Wqr9EzuGHXJWrnnItPNFyI9XpQrZrmTSnLd3HY/ttY2LvoSxpuSVRjOAz6",
	"dYBtTj2ypEK7f1EzvyqV/x1pXDS83q9+dPbMw65JxJG88rLVrmts5rBy9Q0FHlDHbGyqWdxALlrTKxq5",
	"qdFNJm9OtMWNzpCx9XbCMs0PNdDH8cHDRadPZ8nLN6fLyfGnyxo1bcs5/De17eZAfeV8C4sbhff268N5",
	"fw5dW9x867D5blvv/fPdWZLY9X+oOf+3W/RF/1qv6xJKm31Tzt7R96/b/clLq7557u53/wgAAP//Rnr3",
	"ZCESAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
